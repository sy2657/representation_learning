%%writefile my_app7.py
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

import pandas as pd 

import gluonts
import mxnet 

from gluonts.model.deepar import DeepAREstimator
from gluonts.trainer import Trainer

from gluonts.model.simple_feedforward import SimpleFeedForwardEstimator

from gluonts.evaluation.backtest import make_evaluation_predictions

#caiso_url = 'https://raw.githubusercontent.com/sy2657/representation_learning/master/caiso_jan2020_systemloadresource_tacnorth.csv'
#ne_url ='https://raw.githubusercontent.com/sy2657/representation_learning/master/neweng_jan2020.csv'
#edataset = pd.read_csv(ne_url) # energy dataset

newengland = 'NewEnglandNov19WindSolar.csv'
neweng_dataset = pd.read_csv(newengland)
neweng_dataset =neweng_dataset.rename(columns={"ws_forecast (sum) (california_iso)": "iso"})

edataset = neweng_dataset

#normalize
normalized = edataset
# normalize new eng dataframe
emax = edataset['iso'].max()

emin = edataset['iso'].min()

normalized['iso'] = (edataset['iso'] - emin)/(emax - emin)

elen = len(edataset)
a = list(range(elen))

from gluonts.dataset.common import ListDataset

datestart = edataset['DateTime'][0] 

norm_training_data = ListDataset([{"start":datestart, "target": normalized.iso.values}], freq = "1H")

app = dash.Dash()

app.layout= html.Div(children = [
                                 html.Div(children="Energy forecasting"),
                                 dcc.Input(id='input', value=30, type='number', placeholder="prediction length"),
                                 dcc.Input(id='input-day', value=15, type='number', placeholder="day of month"), # choose start date and hour 
                                 dcc.Input(id='input-hour', value=11, type='number', placeholder="starting hour of day"),
                                 # dropdown of region -> use this input to multiple callbacks 
                                 html.Div(id='output-graph'), # time series and predictions (and conf. intervals )
                                 #html.Div(id='output-graph2'),# another output graph for trend
                                 dcc.Checklist(id='hier', options=[{'label':'early morning', 'value':'earlymorning'},
                                               {'label':'morning', 'value': 'morning'},
                                               {'label':'afternoon', 'value':'afternoon'},
                                               {'label':'evening', 'value':'evening'}], value=['morning']),
                                 html.Div(id='output-graph3') # output graph for hour of day 
                                 # display recommended power consumption 
])

@app.callback(Output(component_id = 'output-graph3', component_property='children'),
              [Input(component_id='hier', component_property='value')])
def update_hour_graph(input_values):
  morning_iso = []
  afternoon_iso = []
  evening_iso = []
  earlymorning_iso = []
  dtime = []
  nanarray = []
  for index, row in edataset.iterrows():
    date_time = row['DateTime']
    iso_val = row['iso']
    split_date_time = date_time.split()
    split_date_time1 = split_date_time[1]
    hour_min_sec = split_date_time1.split(":")
    hour= float(hour_min_sec[0])
    dtime.append(date_time)
    nanarray.append(float('nan'))
    if 0 <= hour < 6:
      earlymorning_iso.append(iso_val)
      morning_iso.append(float('nan'))
      afternoon_iso.append(float('nan'))
      evening_iso.append(float('nan'))
    if 6 <= hour <12:
      morning_iso.append(iso_val)
      afternoon_iso.append(float('nan'))
      evening_iso.append(float('nan'))
      earlymorning_iso.append(float('nan'))
    if 12 <= hour < 18:
      afternoon_iso.append(iso_val)
      morning_iso.append(float('nan'))
      evening_iso.append(float('nan'))
      earlymorning_iso.append(float('nan'))
    if 18 <= hour < 24:
      evening_iso.append(iso_val)
      afternoon_iso.append(float('nan'))
      morning_iso.append(float('nan'))
      earlymorning_iso.append(float('nan'))
  max_lim = 300
  min_lim = 100
  ivalues = input_values
  if 'earlymorning' not in ivalues:
    earlymorning_iso = nanarray
  if 'morning' not in ivalues:
    morning_iso = nanarray
  if 'afternoon' not in ivalues:
    afternoon_iso = nanarray
  if 'evening' not in ivalues:
    evening_iso = nanarray
  return dcc.Graph(id='ex-graph3',
                   figure = {
                       'data': [{'x': dtime[min_lim:max_lim], 'y': earlymorning_iso[min_lim:max_lim], 'type':'line', 'name':'early morning' },
                                {'x': dtime[min_lim:max_lim], 'y': morning_iso[min_lim:max_lim], 'type': 'line', 'name':' morning'},
                                {'x': dtime[min_lim:max_lim], 'y': afternoon_iso[min_lim:max_lim], 'type': 'line', 'name':'afternoon'},
                                {'x': dtime[min_lim:max_lim], 'y': evening_iso[min_lim:max_lim], 'type': 'line', 'name': 'evening'}],
                       'layout':{'title': 'Hier. time series divided by hour of day'}
                   })


@app.callback(
    Output(component_id='output-graph', component_property='children'),
    [Input(component_id ='input', component_property ='value'),
     Input(component_id ='input-day', component_property='value'), # input_data2
     Input(component_id ='input-hour', component_property= 'value')] # input_data3
)

def update_graph(input_data, input_data2, input_data3):
  # gluonts 
  test_index = 0 
  ex_day = 15
  ex_hour = 11
  for index, row in edataset.iterrows():
    date_time = row['DateTime']
    iso_val = row['iso']
    split_date_time = date_time.split()
    split_date_time1 = split_date_time[1]
    hour_min_sec = split_date_time1.split(":")
    #print("hour min sec", hour_min_sec)
    hour= float(hour_min_sec[0])
    # determine day 
    dat = split_date_time[0]
    dat1 = dat.split("-")
    day = float(dat1[1])
    if day == ex_day and hour == ex_hour:
      test_index = index
      break
  # test series 
  norm_test = normalized[test_index: test_index+input_data]
  norm_test_dataset = ListDataset([{"start": date_time, "target": norm_test.iso.values}], freq = "1H")
  estimator1 = DeepAREstimator(freq="1H", prediction_length=input_data, trainer=Trainer(epochs=10,batch_size=10))
  predictor1 = estimator1.train(training_data=norm_training_data) 
  deepare_forecast_it, deepare_ts_it = make_evaluation_predictions(dataset=norm_test_dataset, predictor=predictor1, num_samples=10) 
  deepare_forecasts = list(deepare_forecast_it)
  deepare_tss = list(deepare_ts_it)
  dm = deepare_forecasts[0].mean
  #df = deepare_forecasts[0].quantile(0.5) 
  return html.Div(dcc.Graph(id='ex-graph',
                   figure = {
                       'data': [{'x': normalized.DateTime, 'y': normalized.iso, 'type':'line', 'name':'orig. time series values' },
                                {'x': norm_test.DateTime, 'y': dm, 'type': 'line', 'name':'test series'}],
                       'layout':{'title': 'DeepARE prediction'}
                   }))
  
if __name__=='__main__':
  app.run_server(debug=True)
